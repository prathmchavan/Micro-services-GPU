"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotAuthorizedError = exports.BadRequestError = exports.DatabaseConnectionError = exports.RequestValidationError = exports.errorHandler = void 0;
const customError_1 = require("../errors/customError");
const errorHandler = (err, req, res, next) => {
    console.log("something went wrong ", err);
    if (err instanceof customError_1.CustomError) {
        return res.status(err.statusCode).send({ errors: err.serializeErrors() });
    }
    res.status(400).send({ message: err.message });
};
exports.errorHandler = errorHandler;
class RequestValidationError extends customError_1.CustomError {
    constructor(errors) {
        super('Invalid request parameters');
        this.errors = errors;
        this.statusCode = 400;
        // Only because we are extending a built-in class
        Object.setPrototypeOf(this, RequestValidationError.prototype);
    }
    serializeErrors() {
        return this.errors.map((error) => {
            return { message: error.msg, path: error.type };
        });
    }
}
exports.RequestValidationError = RequestValidationError;
class DatabaseConnectionError extends customError_1.CustomError {
    constructor() {
        super("database error ");
        this.statusCode = 500;
        this.reason = 'error connecting to database';
        Object.setPrototypeOf(this, DatabaseConnectionError.prototype);
    }
    serializeErrors() {
        return [
            { message: this.reason }
        ];
    }
}
exports.DatabaseConnectionError = DatabaseConnectionError;
class BadRequestError extends customError_1.CustomError {
    constructor(message) {
        super(message);
        this.message = message;
        this.statusCode = 400;
        Object.setPrototypeOf(this, BadRequestError.prototype);
    }
    serializeErrors() {
        return [{ message: this.message }];
    }
}
exports.BadRequestError = BadRequestError;
class NotAuthorizedError extends customError_1.CustomError {
    constructor() {
        super('not authorized');
        this.statusCode = 401;
        Object.setPrototypeOf(this, NotAuthorizedError.prototype);
    }
    serializeErrors() {
        return [{ message: 'not authorized' }];
    }
}
exports.NotAuthorizedError = NotAuthorizedError;
